// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: expl.proto

#ifndef PROTOBUF_INCLUDED_expl_2eproto
#define PROTOBUF_INCLUDED_expl_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_expl_2eproto 

namespace protobuf_expl_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[16];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_expl_2eproto
namespace prism {
class DataRecord;
class DataRecordDefaultTypeInternal;
extern DataRecordDefaultTypeInternal _DataRecord_default_instance_;
class ExplGraph;
class ExplGraphDefaultTypeInternal;
extern ExplGraphDefaultTypeInternal _ExplGraph_default_instance_;
class ExplGraphGoal;
class ExplGraphGoalDefaultTypeInternal;
extern ExplGraphGoalDefaultTypeInternal _ExplGraphGoal_default_instance_;
class ExplGraphNode;
class ExplGraphNodeDefaultTypeInternal;
extern ExplGraphNodeDefaultTypeInternal _ExplGraphNode_default_instance_;
class ExplGraphPath;
class ExplGraphPathDefaultTypeInternal;
extern ExplGraphPathDefaultTypeInternal _ExplGraphPath_default_instance_;
class Flag;
class FlagDefaultTypeInternal;
extern FlagDefaultTypeInternal _Flag_default_instance_;
class GoalTerm;
class GoalTermDefaultTypeInternal;
extern GoalTermDefaultTypeInternal _GoalTerm_default_instance_;
class IndexRange;
class IndexRangeDefaultTypeInternal;
extern IndexRangeDefaultTypeInternal _IndexRange_default_instance_;
class Option;
class OptionDefaultTypeInternal;
extern OptionDefaultTypeInternal _Option_default_instance_;
class Placeholder;
class PlaceholderDefaultTypeInternal;
extern PlaceholderDefaultTypeInternal _Placeholder_default_instance_;
class PlaceholderData;
class PlaceholderDataDefaultTypeInternal;
extern PlaceholderDataDefaultTypeInternal _PlaceholderData_default_instance_;
class PlaceholderGoal;
class PlaceholderGoalDefaultTypeInternal;
extern PlaceholderGoalDefaultTypeInternal _PlaceholderGoal_default_instance_;
class RankRoot;
class RankRootDefaultTypeInternal;
extern RankRootDefaultTypeInternal _RankRoot_default_instance_;
class Root;
class RootDefaultTypeInternal;
extern RootDefaultTypeInternal _Root_default_instance_;
class SwIns;
class SwInsDefaultTypeInternal;
extern SwInsDefaultTypeInternal _SwIns_default_instance_;
class TensorShape;
class TensorShapeDefaultTypeInternal;
extern TensorShapeDefaultTypeInternal _TensorShape_default_instance_;
}  // namespace prism
namespace google {
namespace protobuf {
template<> ::prism::DataRecord* Arena::CreateMaybeMessage<::prism::DataRecord>(Arena*);
template<> ::prism::ExplGraph* Arena::CreateMaybeMessage<::prism::ExplGraph>(Arena*);
template<> ::prism::ExplGraphGoal* Arena::CreateMaybeMessage<::prism::ExplGraphGoal>(Arena*);
template<> ::prism::ExplGraphNode* Arena::CreateMaybeMessage<::prism::ExplGraphNode>(Arena*);
template<> ::prism::ExplGraphPath* Arena::CreateMaybeMessage<::prism::ExplGraphPath>(Arena*);
template<> ::prism::Flag* Arena::CreateMaybeMessage<::prism::Flag>(Arena*);
template<> ::prism::GoalTerm* Arena::CreateMaybeMessage<::prism::GoalTerm>(Arena*);
template<> ::prism::IndexRange* Arena::CreateMaybeMessage<::prism::IndexRange>(Arena*);
template<> ::prism::Option* Arena::CreateMaybeMessage<::prism::Option>(Arena*);
template<> ::prism::Placeholder* Arena::CreateMaybeMessage<::prism::Placeholder>(Arena*);
template<> ::prism::PlaceholderData* Arena::CreateMaybeMessage<::prism::PlaceholderData>(Arena*);
template<> ::prism::PlaceholderGoal* Arena::CreateMaybeMessage<::prism::PlaceholderGoal>(Arena*);
template<> ::prism::RankRoot* Arena::CreateMaybeMessage<::prism::RankRoot>(Arena*);
template<> ::prism::Root* Arena::CreateMaybeMessage<::prism::Root>(Arena*);
template<> ::prism::SwIns* Arena::CreateMaybeMessage<::prism::SwIns>(Arena*);
template<> ::prism::TensorShape* Arena::CreateMaybeMessage<::prism::TensorShape>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace prism {

enum SwType {
  Probabilistic = 0,
  Tensor = 1,
  Operator = 2,
  SwType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SwType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SwType_IsValid(int value);
const SwType SwType_MIN = Probabilistic;
const SwType SwType_MAX = Operator;
const int SwType_ARRAYSIZE = SwType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SwType_descriptor();
inline const ::std::string& SwType_Name(SwType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SwType_descriptor(), value);
}
inline bool SwType_Parse(
    const ::std::string& name, SwType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SwType>(
    SwType_descriptor(), name, value);
}
// ===================================================================

class PlaceholderData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prism.PlaceholderData) */ {
 public:
  PlaceholderData();
  virtual ~PlaceholderData();

  PlaceholderData(const PlaceholderData& from);

  inline PlaceholderData& operator=(const PlaceholderData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlaceholderData(PlaceholderData&& from) noexcept
    : PlaceholderData() {
    *this = ::std::move(from);
  }

  inline PlaceholderData& operator=(PlaceholderData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlaceholderData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaceholderData* internal_default_instance() {
    return reinterpret_cast<const PlaceholderData*>(
               &_PlaceholderData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PlaceholderData* other);
  friend void swap(PlaceholderData& a, PlaceholderData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlaceholderData* New() const final {
    return CreateMaybeMessage<PlaceholderData>(NULL);
  }

  PlaceholderData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlaceholderData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlaceholderData& from);
  void MergeFrom(const PlaceholderData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceholderData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .prism.PlaceholderGoal goals = 1;
  int goals_size() const;
  void clear_goals();
  static const int kGoalsFieldNumber = 1;
  ::prism::PlaceholderGoal* mutable_goals(int index);
  ::google::protobuf::RepeatedPtrField< ::prism::PlaceholderGoal >*
      mutable_goals();
  const ::prism::PlaceholderGoal& goals(int index) const;
  ::prism::PlaceholderGoal* add_goals();
  const ::google::protobuf::RepeatedPtrField< ::prism::PlaceholderGoal >&
      goals() const;

  // @@protoc_insertion_point(class_scope:prism.PlaceholderData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::prism::PlaceholderGoal > goals_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_expl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlaceholderGoal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prism.PlaceholderGoal) */ {
 public:
  PlaceholderGoal();
  virtual ~PlaceholderGoal();

  PlaceholderGoal(const PlaceholderGoal& from);

  inline PlaceholderGoal& operator=(const PlaceholderGoal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlaceholderGoal(PlaceholderGoal&& from) noexcept
    : PlaceholderGoal() {
    *this = ::std::move(from);
  }

  inline PlaceholderGoal& operator=(PlaceholderGoal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlaceholderGoal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaceholderGoal* internal_default_instance() {
    return reinterpret_cast<const PlaceholderGoal*>(
               &_PlaceholderGoal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PlaceholderGoal* other);
  friend void swap(PlaceholderGoal& a, PlaceholderGoal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlaceholderGoal* New() const final {
    return CreateMaybeMessage<PlaceholderGoal>(NULL);
  }

  PlaceholderGoal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlaceholderGoal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlaceholderGoal& from);
  void MergeFrom(const PlaceholderGoal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceholderGoal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .prism.Placeholder placeholders = 2;
  int placeholders_size() const;
  void clear_placeholders();
  static const int kPlaceholdersFieldNumber = 2;
  ::prism::Placeholder* mutable_placeholders(int index);
  ::google::protobuf::RepeatedPtrField< ::prism::Placeholder >*
      mutable_placeholders();
  const ::prism::Placeholder& placeholders(int index) const;
  ::prism::Placeholder* add_placeholders();
  const ::google::protobuf::RepeatedPtrField< ::prism::Placeholder >&
      placeholders() const;

  // repeated .prism.DataRecord records = 3;
  int records_size() const;
  void clear_records();
  static const int kRecordsFieldNumber = 3;
  ::prism::DataRecord* mutable_records(int index);
  ::google::protobuf::RepeatedPtrField< ::prism::DataRecord >*
      mutable_records();
  const ::prism::DataRecord& records(int index) const;
  ::prism::DataRecord* add_records();
  const ::google::protobuf::RepeatedPtrField< ::prism::DataRecord >&
      records() const;

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:prism.PlaceholderGoal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::prism::Placeholder > placeholders_;
  ::google::protobuf::RepeatedPtrField< ::prism::DataRecord > records_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_expl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prism.DataRecord) */ {
 public:
  DataRecord();
  virtual ~DataRecord();

  DataRecord(const DataRecord& from);

  inline DataRecord& operator=(const DataRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataRecord(DataRecord&& from) noexcept
    : DataRecord() {
    *this = ::std::move(from);
  }

  inline DataRecord& operator=(DataRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataRecord* internal_default_instance() {
    return reinterpret_cast<const DataRecord*>(
               &_DataRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(DataRecord* other);
  friend void swap(DataRecord& a, DataRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataRecord* New() const final {
    return CreateMaybeMessage<DataRecord>(NULL);
  }

  DataRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataRecord& from);
  void MergeFrom(const DataRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string items = 2;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 2;
  const ::std::string& items(int index) const;
  ::std::string* mutable_items(int index);
  void set_items(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_items(int index, ::std::string&& value);
  #endif
  void set_items(int index, const char* value);
  void set_items(int index, const char* value, size_t size);
  ::std::string* add_items();
  void add_items(const ::std::string& value);
  #if LANG_CXX11
  void add_items(::std::string&& value);
  #endif
  void add_items(const char* value);
  void add_items(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& items() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_items();

  // @@protoc_insertion_point(class_scope:prism.DataRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> items_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_expl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Placeholder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prism.Placeholder) */ {
 public:
  Placeholder();
  virtual ~Placeholder();

  Placeholder(const Placeholder& from);

  inline Placeholder& operator=(const Placeholder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Placeholder(Placeholder&& from) noexcept
    : Placeholder() {
    *this = ::std::move(from);
  }

  inline Placeholder& operator=(Placeholder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Placeholder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Placeholder* internal_default_instance() {
    return reinterpret_cast<const Placeholder*>(
               &_Placeholder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Placeholder* other);
  friend void swap(Placeholder& a, Placeholder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Placeholder* New() const final {
    return CreateMaybeMessage<Placeholder>(NULL);
  }

  Placeholder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Placeholder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Placeholder& from);
  void MergeFrom(const Placeholder& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Placeholder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:prism.Placeholder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_expl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Option : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prism.Option) */ {
 public:
  Option();
  virtual ~Option();

  Option(const Option& from);

  inline Option& operator=(const Option& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Option(Option&& from) noexcept
    : Option() {
    *this = ::std::move(from);
  }

  inline Option& operator=(Option&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Option& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Option* internal_default_instance() {
    return reinterpret_cast<const Option*>(
               &_Option_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Option* other);
  friend void swap(Option& a, Option& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Option* New() const final {
    return CreateMaybeMessage<Option>(NULL);
  }

  Option* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Option>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Option& from);
  void MergeFrom(const Option& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Option* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .prism.Flag flags = 1;
  int flags_size() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::prism::Flag* mutable_flags(int index);
  ::google::protobuf::RepeatedPtrField< ::prism::Flag >*
      mutable_flags();
  const ::prism::Flag& flags(int index) const;
  ::prism::Flag* add_flags();
  const ::google::protobuf::RepeatedPtrField< ::prism::Flag >&
      flags() const;

  // repeated .prism.IndexRange index_range = 2;
  int index_range_size() const;
  void clear_index_range();
  static const int kIndexRangeFieldNumber = 2;
  ::prism::IndexRange* mutable_index_range(int index);
  ::google::protobuf::RepeatedPtrField< ::prism::IndexRange >*
      mutable_index_range();
  const ::prism::IndexRange& index_range(int index) const;
  ::prism::IndexRange* add_index_range();
  const ::google::protobuf::RepeatedPtrField< ::prism::IndexRange >&
      index_range() const;

  // repeated .prism.TensorShape tensor_shape = 3;
  int tensor_shape_size() const;
  void clear_tensor_shape();
  static const int kTensorShapeFieldNumber = 3;
  ::prism::TensorShape* mutable_tensor_shape(int index);
  ::google::protobuf::RepeatedPtrField< ::prism::TensorShape >*
      mutable_tensor_shape();
  const ::prism::TensorShape& tensor_shape(int index) const;
  ::prism::TensorShape* add_tensor_shape();
  const ::google::protobuf::RepeatedPtrField< ::prism::TensorShape >&
      tensor_shape() const;

  // @@protoc_insertion_point(class_scope:prism.Option)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::prism::Flag > flags_;
  ::google::protobuf::RepeatedPtrField< ::prism::IndexRange > index_range_;
  ::google::protobuf::RepeatedPtrField< ::prism::TensorShape > tensor_shape_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_expl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Flag : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prism.Flag) */ {
 public:
  Flag();
  virtual ~Flag();

  Flag(const Flag& from);

  inline Flag& operator=(const Flag& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Flag(Flag&& from) noexcept
    : Flag() {
    *this = ::std::move(from);
  }

  inline Flag& operator=(Flag&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Flag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Flag* internal_default_instance() {
    return reinterpret_cast<const Flag*>(
               &_Flag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Flag* other);
  friend void swap(Flag& a, Flag& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Flag* New() const final {
    return CreateMaybeMessage<Flag>(NULL);
  }

  Flag* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Flag>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Flag& from);
  void MergeFrom(const Flag& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Flag* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:prism.Flag)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_expl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IndexRange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prism.IndexRange) */ {
 public:
  IndexRange();
  virtual ~IndexRange();

  IndexRange(const IndexRange& from);

  inline IndexRange& operator=(const IndexRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IndexRange(IndexRange&& from) noexcept
    : IndexRange() {
    *this = ::std::move(from);
  }

  inline IndexRange& operator=(IndexRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndexRange* internal_default_instance() {
    return reinterpret_cast<const IndexRange*>(
               &_IndexRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(IndexRange* other);
  friend void swap(IndexRange& a, IndexRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IndexRange* New() const final {
    return CreateMaybeMessage<IndexRange>(NULL);
  }

  IndexRange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IndexRange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IndexRange& from);
  void MergeFrom(const IndexRange& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  const ::std::string& index() const;
  void set_index(const ::std::string& value);
  #if LANG_CXX11
  void set_index(::std::string&& value);
  #endif
  void set_index(const char* value);
  void set_index(const char* value, size_t size);
  ::std::string* mutable_index();
  ::std::string* release_index();
  void set_allocated_index(::std::string* index);

  // int32 range = 2;
  void clear_range();
  static const int kRangeFieldNumber = 2;
  ::google::protobuf::int32 range() const;
  void set_range(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:prism.IndexRange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr index_;
  ::google::protobuf::int32 range_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_expl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TensorShape : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prism.TensorShape) */ {
 public:
  TensorShape();
  virtual ~TensorShape();

  TensorShape(const TensorShape& from);

  inline TensorShape& operator=(const TensorShape& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TensorShape(TensorShape&& from) noexcept
    : TensorShape() {
    *this = ::std::move(from);
  }

  inline TensorShape& operator=(TensorShape&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorShape& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorShape* internal_default_instance() {
    return reinterpret_cast<const TensorShape*>(
               &_TensorShape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(TensorShape* other);
  friend void swap(TensorShape& a, TensorShape& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TensorShape* New() const final {
    return CreateMaybeMessage<TensorShape>(NULL);
  }

  TensorShape* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TensorShape>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TensorShape& from);
  void MergeFrom(const TensorShape& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorShape* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 shape = 2;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 2;
  ::google::protobuf::int32 shape(int index) const;
  void set_shape(int index, ::google::protobuf::int32 value);
  void add_shape(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shape() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shape();

  // string tensor_name = 1;
  void clear_tensor_name();
  static const int kTensorNameFieldNumber = 1;
  const ::std::string& tensor_name() const;
  void set_tensor_name(const ::std::string& value);
  #if LANG_CXX11
  void set_tensor_name(::std::string&& value);
  #endif
  void set_tensor_name(const char* value);
  void set_tensor_name(const char* value, size_t size);
  ::std::string* mutable_tensor_name();
  ::std::string* release_tensor_name();
  void set_allocated_tensor_name(::std::string* tensor_name);

  // string type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:prism.TensorShape)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shape_;
  mutable int _shape_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr tensor_name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_expl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExplGraph : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prism.ExplGraph) */ {
 public:
  ExplGraph();
  virtual ~ExplGraph();

  ExplGraph(const ExplGraph& from);

  inline ExplGraph& operator=(const ExplGraph& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExplGraph(ExplGraph&& from) noexcept
    : ExplGraph() {
    *this = ::std::move(from);
  }

  inline ExplGraph& operator=(ExplGraph&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExplGraph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExplGraph* internal_default_instance() {
    return reinterpret_cast<const ExplGraph*>(
               &_ExplGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ExplGraph* other);
  friend void swap(ExplGraph& a, ExplGraph& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExplGraph* New() const final {
    return CreateMaybeMessage<ExplGraph>(NULL);
  }

  ExplGraph* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExplGraph>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExplGraph& from);
  void MergeFrom(const ExplGraph& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExplGraph* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .prism.ExplGraphGoal goals = 1;
  int goals_size() const;
  void clear_goals();
  static const int kGoalsFieldNumber = 1;
  ::prism::ExplGraphGoal* mutable_goals(int index);
  ::google::protobuf::RepeatedPtrField< ::prism::ExplGraphGoal >*
      mutable_goals();
  const ::prism::ExplGraphGoal& goals(int index) const;
  ::prism::ExplGraphGoal* add_goals();
  const ::google::protobuf::RepeatedPtrField< ::prism::ExplGraphGoal >&
      goals() const;

  // repeated .prism.RankRoot root_list = 2;
  int root_list_size() const;
  void clear_root_list();
  static const int kRootListFieldNumber = 2;
  ::prism::RankRoot* mutable_root_list(int index);
  ::google::protobuf::RepeatedPtrField< ::prism::RankRoot >*
      mutable_root_list();
  const ::prism::RankRoot& root_list(int index) const;
  ::prism::RankRoot* add_root_list();
  const ::google::protobuf::RepeatedPtrField< ::prism::RankRoot >&
      root_list() const;

  // @@protoc_insertion_point(class_scope:prism.ExplGraph)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::prism::ExplGraphGoal > goals_;
  ::google::protobuf::RepeatedPtrField< ::prism::RankRoot > root_list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_expl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExplGraphGoal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prism.ExplGraphGoal) */ {
 public:
  ExplGraphGoal();
  virtual ~ExplGraphGoal();

  ExplGraphGoal(const ExplGraphGoal& from);

  inline ExplGraphGoal& operator=(const ExplGraphGoal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExplGraphGoal(ExplGraphGoal&& from) noexcept
    : ExplGraphGoal() {
    *this = ::std::move(from);
  }

  inline ExplGraphGoal& operator=(ExplGraphGoal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExplGraphGoal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExplGraphGoal* internal_default_instance() {
    return reinterpret_cast<const ExplGraphGoal*>(
               &_ExplGraphGoal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ExplGraphGoal* other);
  friend void swap(ExplGraphGoal& a, ExplGraphGoal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExplGraphGoal* New() const final {
    return CreateMaybeMessage<ExplGraphGoal>(NULL);
  }

  ExplGraphGoal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExplGraphGoal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExplGraphGoal& from);
  void MergeFrom(const ExplGraphGoal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExplGraphGoal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .prism.ExplGraphPath paths = 2;
  int paths_size() const;
  void clear_paths();
  static const int kPathsFieldNumber = 2;
  ::prism::ExplGraphPath* mutable_paths(int index);
  ::google::protobuf::RepeatedPtrField< ::prism::ExplGraphPath >*
      mutable_paths();
  const ::prism::ExplGraphPath& paths(int index) const;
  ::prism::ExplGraphPath* add_paths();
  const ::google::protobuf::RepeatedPtrField< ::prism::ExplGraphPath >&
      paths() const;

  // .prism.ExplGraphNode node = 1;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 1;
  private:
  const ::prism::ExplGraphNode& _internal_node() const;
  public:
  const ::prism::ExplGraphNode& node() const;
  ::prism::ExplGraphNode* release_node();
  ::prism::ExplGraphNode* mutable_node();
  void set_allocated_node(::prism::ExplGraphNode* node);

  // @@protoc_insertion_point(class_scope:prism.ExplGraphGoal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::prism::ExplGraphPath > paths_;
  ::prism::ExplGraphNode* node_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_expl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExplGraphPath : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prism.ExplGraphPath) */ {
 public:
  ExplGraphPath();
  virtual ~ExplGraphPath();

  ExplGraphPath(const ExplGraphPath& from);

  inline ExplGraphPath& operator=(const ExplGraphPath& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExplGraphPath(ExplGraphPath&& from) noexcept
    : ExplGraphPath() {
    *this = ::std::move(from);
  }

  inline ExplGraphPath& operator=(ExplGraphPath&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExplGraphPath& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExplGraphPath* internal_default_instance() {
    return reinterpret_cast<const ExplGraphPath*>(
               &_ExplGraphPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ExplGraphPath* other);
  friend void swap(ExplGraphPath& a, ExplGraphPath& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExplGraphPath* New() const final {
    return CreateMaybeMessage<ExplGraphPath>(NULL);
  }

  ExplGraphPath* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExplGraphPath>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExplGraphPath& from);
  void MergeFrom(const ExplGraphPath& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExplGraphPath* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .prism.ExplGraphNode nodes = 1;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 1;
  ::prism::ExplGraphNode* mutable_nodes(int index);
  ::google::protobuf::RepeatedPtrField< ::prism::ExplGraphNode >*
      mutable_nodes();
  const ::prism::ExplGraphNode& nodes(int index) const;
  ::prism::ExplGraphNode* add_nodes();
  const ::google::protobuf::RepeatedPtrField< ::prism::ExplGraphNode >&
      nodes() const;

  // repeated .prism.SwIns prob_switches = 2;
  int prob_switches_size() const;
  void clear_prob_switches();
  static const int kProbSwitchesFieldNumber = 2;
  ::prism::SwIns* mutable_prob_switches(int index);
  ::google::protobuf::RepeatedPtrField< ::prism::SwIns >*
      mutable_prob_switches();
  const ::prism::SwIns& prob_switches(int index) const;
  ::prism::SwIns* add_prob_switches();
  const ::google::protobuf::RepeatedPtrField< ::prism::SwIns >&
      prob_switches() const;

  // repeated .prism.SwIns tensor_switches = 3;
  int tensor_switches_size() const;
  void clear_tensor_switches();
  static const int kTensorSwitchesFieldNumber = 3;
  ::prism::SwIns* mutable_tensor_switches(int index);
  ::google::protobuf::RepeatedPtrField< ::prism::SwIns >*
      mutable_tensor_switches();
  const ::prism::SwIns& tensor_switches(int index) const;
  ::prism::SwIns* add_tensor_switches();
  const ::google::protobuf::RepeatedPtrField< ::prism::SwIns >&
      tensor_switches() const;

  // repeated .prism.SwIns operators = 4;
  int operators_size() const;
  void clear_operators();
  static const int kOperatorsFieldNumber = 4;
  ::prism::SwIns* mutable_operators(int index);
  ::google::protobuf::RepeatedPtrField< ::prism::SwIns >*
      mutable_operators();
  const ::prism::SwIns& operators(int index) const;
  ::prism::SwIns* add_operators();
  const ::google::protobuf::RepeatedPtrField< ::prism::SwIns >&
      operators() const;

  // @@protoc_insertion_point(class_scope:prism.ExplGraphPath)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::prism::ExplGraphNode > nodes_;
  ::google::protobuf::RepeatedPtrField< ::prism::SwIns > prob_switches_;
  ::google::protobuf::RepeatedPtrField< ::prism::SwIns > tensor_switches_;
  ::google::protobuf::RepeatedPtrField< ::prism::SwIns > operators_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_expl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExplGraphNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prism.ExplGraphNode) */ {
 public:
  ExplGraphNode();
  virtual ~ExplGraphNode();

  ExplGraphNode(const ExplGraphNode& from);

  inline ExplGraphNode& operator=(const ExplGraphNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExplGraphNode(ExplGraphNode&& from) noexcept
    : ExplGraphNode() {
    *this = ::std::move(from);
  }

  inline ExplGraphNode& operator=(ExplGraphNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExplGraphNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExplGraphNode* internal_default_instance() {
    return reinterpret_cast<const ExplGraphNode*>(
               &_ExplGraphNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ExplGraphNode* other);
  friend void swap(ExplGraphNode& a, ExplGraphNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExplGraphNode* New() const final {
    return CreateMaybeMessage<ExplGraphNode>(NULL);
  }

  ExplGraphNode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExplGraphNode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExplGraphNode& from);
  void MergeFrom(const ExplGraphNode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExplGraphNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .prism.GoalTerm goal = 3;
  bool has_goal() const;
  void clear_goal();
  static const int kGoalFieldNumber = 3;
  private:
  const ::prism::GoalTerm& _internal_goal() const;
  public:
  const ::prism::GoalTerm& goal() const;
  ::prism::GoalTerm* release_goal();
  ::prism::GoalTerm* mutable_goal();
  void set_allocated_goal(::prism::GoalTerm* goal);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 sorted_id = 2;
  void clear_sorted_id();
  static const int kSortedIdFieldNumber = 2;
  ::google::protobuf::int32 sorted_id() const;
  void set_sorted_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:prism.ExplGraphNode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::prism::GoalTerm* goal_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 sorted_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_expl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GoalTerm : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prism.GoalTerm) */ {
 public:
  GoalTerm();
  virtual ~GoalTerm();

  GoalTerm(const GoalTerm& from);

  inline GoalTerm& operator=(const GoalTerm& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GoalTerm(GoalTerm&& from) noexcept
    : GoalTerm() {
    *this = ::std::move(from);
  }

  inline GoalTerm& operator=(GoalTerm&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GoalTerm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GoalTerm* internal_default_instance() {
    return reinterpret_cast<const GoalTerm*>(
               &_GoalTerm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(GoalTerm* other);
  friend void swap(GoalTerm& a, GoalTerm& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GoalTerm* New() const final {
    return CreateMaybeMessage<GoalTerm>(NULL);
  }

  GoalTerm* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GoalTerm>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GoalTerm& from);
  void MergeFrom(const GoalTerm& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoalTerm* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string args = 2;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 2;
  const ::std::string& args(int index) const;
  ::std::string* mutable_args(int index);
  void set_args(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_args(int index, ::std::string&& value);
  #endif
  void set_args(int index, const char* value);
  void set_args(int index, const char* value, size_t size);
  ::std::string* add_args();
  void add_args(const ::std::string& value);
  #if LANG_CXX11
  void add_args(::std::string&& value);
  #endif
  void add_args(const char* value);
  void add_args(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& args() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_args();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:prism.GoalTerm)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> args_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_expl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SwIns : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prism.SwIns) */ {
 public:
  SwIns();
  virtual ~SwIns();

  SwIns(const SwIns& from);

  inline SwIns& operator=(const SwIns& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SwIns(SwIns&& from) noexcept
    : SwIns() {
    *this = ::std::move(from);
  }

  inline SwIns& operator=(SwIns&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SwIns& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SwIns* internal_default_instance() {
    return reinterpret_cast<const SwIns*>(
               &_SwIns_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(SwIns* other);
  friend void swap(SwIns& a, SwIns& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SwIns* New() const final {
    return CreateMaybeMessage<SwIns>(NULL);
  }

  SwIns* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SwIns>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SwIns& from);
  void MergeFrom(const SwIns& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwIns* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string values = 3;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 3;
  const ::std::string& values(int index) const;
  ::std::string* mutable_values(int index);
  void set_values(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_values(int index, ::std::string&& value);
  #endif
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  ::std::string* add_values();
  void add_values(const ::std::string& value);
  #if LANG_CXX11
  void add_values(::std::string&& value);
  #endif
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& values() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_values();

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // float inside = 4;
  void clear_inside();
  static const int kInsideFieldNumber = 4;
  float inside() const;
  void set_inside(float value);

  // .prism.SwType sw_type = 5;
  void clear_sw_type();
  static const int kSwTypeFieldNumber = 5;
  ::prism::SwType sw_type() const;
  void set_sw_type(::prism::SwType value);

  // @@protoc_insertion_point(class_scope:prism.SwIns)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> values_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  float inside_;
  int sw_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_expl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Root : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prism.Root) */ {
 public:
  Root();
  virtual ~Root();

  Root(const Root& from);

  inline Root& operator=(const Root& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Root(Root&& from) noexcept
    : Root() {
    *this = ::std::move(from);
  }

  inline Root& operator=(Root&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Root& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Root* internal_default_instance() {
    return reinterpret_cast<const Root*>(
               &_Root_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(Root* other);
  friend void swap(Root& a, Root& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Root* New() const final {
    return CreateMaybeMessage<Root>(NULL);
  }

  Root* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Root>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Root& from);
  void MergeFrom(const Root& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Root* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 sorted_id = 2;
  void clear_sorted_id();
  static const int kSortedIdFieldNumber = 2;
  ::google::protobuf::int32 sorted_id() const;
  void set_sorted_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:prism.Root)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 sorted_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_expl_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RankRoot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prism.RankRoot) */ {
 public:
  RankRoot();
  virtual ~RankRoot();

  RankRoot(const RankRoot& from);

  inline RankRoot& operator=(const RankRoot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RankRoot(RankRoot&& from) noexcept
    : RankRoot() {
    *this = ::std::move(from);
  }

  inline RankRoot& operator=(RankRoot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RankRoot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankRoot* internal_default_instance() {
    return reinterpret_cast<const RankRoot*>(
               &_RankRoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(RankRoot* other);
  friend void swap(RankRoot& a, RankRoot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RankRoot* New() const final {
    return CreateMaybeMessage<RankRoot>(NULL);
  }

  RankRoot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RankRoot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RankRoot& from);
  void MergeFrom(const RankRoot& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankRoot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .prism.Root roots = 1;
  int roots_size() const;
  void clear_roots();
  static const int kRootsFieldNumber = 1;
  ::prism::Root* mutable_roots(int index);
  ::google::protobuf::RepeatedPtrField< ::prism::Root >*
      mutable_roots();
  const ::prism::Root& roots(int index) const;
  ::prism::Root* add_roots();
  const ::google::protobuf::RepeatedPtrField< ::prism::Root >&
      roots() const;

  // int32 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:prism.RankRoot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::prism::Root > roots_;
  ::google::protobuf::int32 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_expl_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlaceholderData

// repeated .prism.PlaceholderGoal goals = 1;
inline int PlaceholderData::goals_size() const {
  return goals_.size();
}
inline void PlaceholderData::clear_goals() {
  goals_.Clear();
}
inline ::prism::PlaceholderGoal* PlaceholderData::mutable_goals(int index) {
  // @@protoc_insertion_point(field_mutable:prism.PlaceholderData.goals)
  return goals_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prism::PlaceholderGoal >*
PlaceholderData::mutable_goals() {
  // @@protoc_insertion_point(field_mutable_list:prism.PlaceholderData.goals)
  return &goals_;
}
inline const ::prism::PlaceholderGoal& PlaceholderData::goals(int index) const {
  // @@protoc_insertion_point(field_get:prism.PlaceholderData.goals)
  return goals_.Get(index);
}
inline ::prism::PlaceholderGoal* PlaceholderData::add_goals() {
  // @@protoc_insertion_point(field_add:prism.PlaceholderData.goals)
  return goals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prism::PlaceholderGoal >&
PlaceholderData::goals() const {
  // @@protoc_insertion_point(field_list:prism.PlaceholderData.goals)
  return goals_;
}

// -------------------------------------------------------------------

// PlaceholderGoal

// int32 id = 1;
inline void PlaceholderGoal::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 PlaceholderGoal::id() const {
  // @@protoc_insertion_point(field_get:prism.PlaceholderGoal.id)
  return id_;
}
inline void PlaceholderGoal::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:prism.PlaceholderGoal.id)
}

// repeated .prism.Placeholder placeholders = 2;
inline int PlaceholderGoal::placeholders_size() const {
  return placeholders_.size();
}
inline void PlaceholderGoal::clear_placeholders() {
  placeholders_.Clear();
}
inline ::prism::Placeholder* PlaceholderGoal::mutable_placeholders(int index) {
  // @@protoc_insertion_point(field_mutable:prism.PlaceholderGoal.placeholders)
  return placeholders_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prism::Placeholder >*
PlaceholderGoal::mutable_placeholders() {
  // @@protoc_insertion_point(field_mutable_list:prism.PlaceholderGoal.placeholders)
  return &placeholders_;
}
inline const ::prism::Placeholder& PlaceholderGoal::placeholders(int index) const {
  // @@protoc_insertion_point(field_get:prism.PlaceholderGoal.placeholders)
  return placeholders_.Get(index);
}
inline ::prism::Placeholder* PlaceholderGoal::add_placeholders() {
  // @@protoc_insertion_point(field_add:prism.PlaceholderGoal.placeholders)
  return placeholders_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prism::Placeholder >&
PlaceholderGoal::placeholders() const {
  // @@protoc_insertion_point(field_list:prism.PlaceholderGoal.placeholders)
  return placeholders_;
}

// repeated .prism.DataRecord records = 3;
inline int PlaceholderGoal::records_size() const {
  return records_.size();
}
inline void PlaceholderGoal::clear_records() {
  records_.Clear();
}
inline ::prism::DataRecord* PlaceholderGoal::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:prism.PlaceholderGoal.records)
  return records_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prism::DataRecord >*
PlaceholderGoal::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:prism.PlaceholderGoal.records)
  return &records_;
}
inline const ::prism::DataRecord& PlaceholderGoal::records(int index) const {
  // @@protoc_insertion_point(field_get:prism.PlaceholderGoal.records)
  return records_.Get(index);
}
inline ::prism::DataRecord* PlaceholderGoal::add_records() {
  // @@protoc_insertion_point(field_add:prism.PlaceholderGoal.records)
  return records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prism::DataRecord >&
PlaceholderGoal::records() const {
  // @@protoc_insertion_point(field_list:prism.PlaceholderGoal.records)
  return records_;
}

// -------------------------------------------------------------------

// DataRecord

// repeated string items = 2;
inline int DataRecord::items_size() const {
  return items_.size();
}
inline void DataRecord::clear_items() {
  items_.Clear();
}
inline const ::std::string& DataRecord::items(int index) const {
  // @@protoc_insertion_point(field_get:prism.DataRecord.items)
  return items_.Get(index);
}
inline ::std::string* DataRecord::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:prism.DataRecord.items)
  return items_.Mutable(index);
}
inline void DataRecord::set_items(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:prism.DataRecord.items)
  items_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DataRecord::set_items(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:prism.DataRecord.items)
  items_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DataRecord::set_items(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:prism.DataRecord.items)
}
inline void DataRecord::set_items(int index, const char* value, size_t size) {
  items_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:prism.DataRecord.items)
}
inline ::std::string* DataRecord::add_items() {
  // @@protoc_insertion_point(field_add_mutable:prism.DataRecord.items)
  return items_.Add();
}
inline void DataRecord::add_items(const ::std::string& value) {
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:prism.DataRecord.items)
}
#if LANG_CXX11
inline void DataRecord::add_items(::std::string&& value) {
  items_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:prism.DataRecord.items)
}
#endif
inline void DataRecord::add_items(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:prism.DataRecord.items)
}
inline void DataRecord::add_items(const char* value, size_t size) {
  items_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:prism.DataRecord.items)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DataRecord::items() const {
  // @@protoc_insertion_point(field_list:prism.DataRecord.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DataRecord::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:prism.DataRecord.items)
  return &items_;
}

// -------------------------------------------------------------------

// Placeholder

// string name = 1;
inline void Placeholder::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Placeholder::name() const {
  // @@protoc_insertion_point(field_get:prism.Placeholder.name)
  return name_.GetNoArena();
}
inline void Placeholder::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prism.Placeholder.name)
}
#if LANG_CXX11
inline void Placeholder::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prism.Placeholder.name)
}
#endif
inline void Placeholder::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prism.Placeholder.name)
}
inline void Placeholder::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prism.Placeholder.name)
}
inline ::std::string* Placeholder::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:prism.Placeholder.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Placeholder::release_name() {
  // @@protoc_insertion_point(field_release:prism.Placeholder.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Placeholder::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:prism.Placeholder.name)
}

// -------------------------------------------------------------------

// Option

// repeated .prism.Flag flags = 1;
inline int Option::flags_size() const {
  return flags_.size();
}
inline void Option::clear_flags() {
  flags_.Clear();
}
inline ::prism::Flag* Option::mutable_flags(int index) {
  // @@protoc_insertion_point(field_mutable:prism.Option.flags)
  return flags_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prism::Flag >*
Option::mutable_flags() {
  // @@protoc_insertion_point(field_mutable_list:prism.Option.flags)
  return &flags_;
}
inline const ::prism::Flag& Option::flags(int index) const {
  // @@protoc_insertion_point(field_get:prism.Option.flags)
  return flags_.Get(index);
}
inline ::prism::Flag* Option::add_flags() {
  // @@protoc_insertion_point(field_add:prism.Option.flags)
  return flags_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prism::Flag >&
Option::flags() const {
  // @@protoc_insertion_point(field_list:prism.Option.flags)
  return flags_;
}

// repeated .prism.IndexRange index_range = 2;
inline int Option::index_range_size() const {
  return index_range_.size();
}
inline void Option::clear_index_range() {
  index_range_.Clear();
}
inline ::prism::IndexRange* Option::mutable_index_range(int index) {
  // @@protoc_insertion_point(field_mutable:prism.Option.index_range)
  return index_range_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prism::IndexRange >*
Option::mutable_index_range() {
  // @@protoc_insertion_point(field_mutable_list:prism.Option.index_range)
  return &index_range_;
}
inline const ::prism::IndexRange& Option::index_range(int index) const {
  // @@protoc_insertion_point(field_get:prism.Option.index_range)
  return index_range_.Get(index);
}
inline ::prism::IndexRange* Option::add_index_range() {
  // @@protoc_insertion_point(field_add:prism.Option.index_range)
  return index_range_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prism::IndexRange >&
Option::index_range() const {
  // @@protoc_insertion_point(field_list:prism.Option.index_range)
  return index_range_;
}

// repeated .prism.TensorShape tensor_shape = 3;
inline int Option::tensor_shape_size() const {
  return tensor_shape_.size();
}
inline void Option::clear_tensor_shape() {
  tensor_shape_.Clear();
}
inline ::prism::TensorShape* Option::mutable_tensor_shape(int index) {
  // @@protoc_insertion_point(field_mutable:prism.Option.tensor_shape)
  return tensor_shape_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prism::TensorShape >*
Option::mutable_tensor_shape() {
  // @@protoc_insertion_point(field_mutable_list:prism.Option.tensor_shape)
  return &tensor_shape_;
}
inline const ::prism::TensorShape& Option::tensor_shape(int index) const {
  // @@protoc_insertion_point(field_get:prism.Option.tensor_shape)
  return tensor_shape_.Get(index);
}
inline ::prism::TensorShape* Option::add_tensor_shape() {
  // @@protoc_insertion_point(field_add:prism.Option.tensor_shape)
  return tensor_shape_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prism::TensorShape >&
Option::tensor_shape() const {
  // @@protoc_insertion_point(field_list:prism.Option.tensor_shape)
  return tensor_shape_;
}

// -------------------------------------------------------------------

// Flag

// string key = 1;
inline void Flag::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Flag::key() const {
  // @@protoc_insertion_point(field_get:prism.Flag.key)
  return key_.GetNoArena();
}
inline void Flag::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prism.Flag.key)
}
#if LANG_CXX11
inline void Flag::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prism.Flag.key)
}
#endif
inline void Flag::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prism.Flag.key)
}
inline void Flag::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prism.Flag.key)
}
inline ::std::string* Flag::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:prism.Flag.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Flag::release_key() {
  // @@protoc_insertion_point(field_release:prism.Flag.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Flag::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:prism.Flag.key)
}

// string value = 2;
inline void Flag::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Flag::value() const {
  // @@protoc_insertion_point(field_get:prism.Flag.value)
  return value_.GetNoArena();
}
inline void Flag::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prism.Flag.value)
}
#if LANG_CXX11
inline void Flag::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prism.Flag.value)
}
#endif
inline void Flag::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prism.Flag.value)
}
inline void Flag::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prism.Flag.value)
}
inline ::std::string* Flag::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:prism.Flag.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Flag::release_value() {
  // @@protoc_insertion_point(field_release:prism.Flag.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Flag::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:prism.Flag.value)
}

// -------------------------------------------------------------------

// IndexRange

// string index = 1;
inline void IndexRange::clear_index() {
  index_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexRange::index() const {
  // @@protoc_insertion_point(field_get:prism.IndexRange.index)
  return index_.GetNoArena();
}
inline void IndexRange::set_index(const ::std::string& value) {
  
  index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prism.IndexRange.index)
}
#if LANG_CXX11
inline void IndexRange::set_index(::std::string&& value) {
  
  index_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prism.IndexRange.index)
}
#endif
inline void IndexRange::set_index(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prism.IndexRange.index)
}
inline void IndexRange::set_index(const char* value, size_t size) {
  
  index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prism.IndexRange.index)
}
inline ::std::string* IndexRange::mutable_index() {
  
  // @@protoc_insertion_point(field_mutable:prism.IndexRange.index)
  return index_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexRange::release_index() {
  // @@protoc_insertion_point(field_release:prism.IndexRange.index)
  
  return index_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexRange::set_allocated_index(::std::string* index) {
  if (index != NULL) {
    
  } else {
    
  }
  index_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), index);
  // @@protoc_insertion_point(field_set_allocated:prism.IndexRange.index)
}

// int32 range = 2;
inline void IndexRange::clear_range() {
  range_ = 0;
}
inline ::google::protobuf::int32 IndexRange::range() const {
  // @@protoc_insertion_point(field_get:prism.IndexRange.range)
  return range_;
}
inline void IndexRange::set_range(::google::protobuf::int32 value) {
  
  range_ = value;
  // @@protoc_insertion_point(field_set:prism.IndexRange.range)
}

// -------------------------------------------------------------------

// TensorShape

// string tensor_name = 1;
inline void TensorShape::clear_tensor_name() {
  tensor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TensorShape::tensor_name() const {
  // @@protoc_insertion_point(field_get:prism.TensorShape.tensor_name)
  return tensor_name_.GetNoArena();
}
inline void TensorShape::set_tensor_name(const ::std::string& value) {
  
  tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prism.TensorShape.tensor_name)
}
#if LANG_CXX11
inline void TensorShape::set_tensor_name(::std::string&& value) {
  
  tensor_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prism.TensorShape.tensor_name)
}
#endif
inline void TensorShape::set_tensor_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prism.TensorShape.tensor_name)
}
inline void TensorShape::set_tensor_name(const char* value, size_t size) {
  
  tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prism.TensorShape.tensor_name)
}
inline ::std::string* TensorShape::mutable_tensor_name() {
  
  // @@protoc_insertion_point(field_mutable:prism.TensorShape.tensor_name)
  return tensor_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TensorShape::release_tensor_name() {
  // @@protoc_insertion_point(field_release:prism.TensorShape.tensor_name)
  
  return tensor_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorShape::set_allocated_tensor_name(::std::string* tensor_name) {
  if (tensor_name != NULL) {
    
  } else {
    
  }
  tensor_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tensor_name);
  // @@protoc_insertion_point(field_set_allocated:prism.TensorShape.tensor_name)
}

// repeated int32 shape = 2;
inline int TensorShape::shape_size() const {
  return shape_.size();
}
inline void TensorShape::clear_shape() {
  shape_.Clear();
}
inline ::google::protobuf::int32 TensorShape::shape(int index) const {
  // @@protoc_insertion_point(field_get:prism.TensorShape.shape)
  return shape_.Get(index);
}
inline void TensorShape::set_shape(int index, ::google::protobuf::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:prism.TensorShape.shape)
}
inline void TensorShape::add_shape(::google::protobuf::int32 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:prism.TensorShape.shape)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TensorShape::shape() const {
  // @@protoc_insertion_point(field_list:prism.TensorShape.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TensorShape::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:prism.TensorShape.shape)
  return &shape_;
}

// string type = 3;
inline void TensorShape::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TensorShape::type() const {
  // @@protoc_insertion_point(field_get:prism.TensorShape.type)
  return type_.GetNoArena();
}
inline void TensorShape::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prism.TensorShape.type)
}
#if LANG_CXX11
inline void TensorShape::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prism.TensorShape.type)
}
#endif
inline void TensorShape::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prism.TensorShape.type)
}
inline void TensorShape::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prism.TensorShape.type)
}
inline ::std::string* TensorShape::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:prism.TensorShape.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TensorShape::release_type() {
  // @@protoc_insertion_point(field_release:prism.TensorShape.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorShape::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:prism.TensorShape.type)
}

// -------------------------------------------------------------------

// ExplGraph

// repeated .prism.ExplGraphGoal goals = 1;
inline int ExplGraph::goals_size() const {
  return goals_.size();
}
inline void ExplGraph::clear_goals() {
  goals_.Clear();
}
inline ::prism::ExplGraphGoal* ExplGraph::mutable_goals(int index) {
  // @@protoc_insertion_point(field_mutable:prism.ExplGraph.goals)
  return goals_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prism::ExplGraphGoal >*
ExplGraph::mutable_goals() {
  // @@protoc_insertion_point(field_mutable_list:prism.ExplGraph.goals)
  return &goals_;
}
inline const ::prism::ExplGraphGoal& ExplGraph::goals(int index) const {
  // @@protoc_insertion_point(field_get:prism.ExplGraph.goals)
  return goals_.Get(index);
}
inline ::prism::ExplGraphGoal* ExplGraph::add_goals() {
  // @@protoc_insertion_point(field_add:prism.ExplGraph.goals)
  return goals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prism::ExplGraphGoal >&
ExplGraph::goals() const {
  // @@protoc_insertion_point(field_list:prism.ExplGraph.goals)
  return goals_;
}

// repeated .prism.RankRoot root_list = 2;
inline int ExplGraph::root_list_size() const {
  return root_list_.size();
}
inline void ExplGraph::clear_root_list() {
  root_list_.Clear();
}
inline ::prism::RankRoot* ExplGraph::mutable_root_list(int index) {
  // @@protoc_insertion_point(field_mutable:prism.ExplGraph.root_list)
  return root_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prism::RankRoot >*
ExplGraph::mutable_root_list() {
  // @@protoc_insertion_point(field_mutable_list:prism.ExplGraph.root_list)
  return &root_list_;
}
inline const ::prism::RankRoot& ExplGraph::root_list(int index) const {
  // @@protoc_insertion_point(field_get:prism.ExplGraph.root_list)
  return root_list_.Get(index);
}
inline ::prism::RankRoot* ExplGraph::add_root_list() {
  // @@protoc_insertion_point(field_add:prism.ExplGraph.root_list)
  return root_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prism::RankRoot >&
ExplGraph::root_list() const {
  // @@protoc_insertion_point(field_list:prism.ExplGraph.root_list)
  return root_list_;
}

// -------------------------------------------------------------------

// ExplGraphGoal

// .prism.ExplGraphNode node = 1;
inline bool ExplGraphGoal::has_node() const {
  return this != internal_default_instance() && node_ != NULL;
}
inline void ExplGraphGoal::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) {
    delete node_;
  }
  node_ = NULL;
}
inline const ::prism::ExplGraphNode& ExplGraphGoal::_internal_node() const {
  return *node_;
}
inline const ::prism::ExplGraphNode& ExplGraphGoal::node() const {
  const ::prism::ExplGraphNode* p = node_;
  // @@protoc_insertion_point(field_get:prism.ExplGraphGoal.node)
  return p != NULL ? *p : *reinterpret_cast<const ::prism::ExplGraphNode*>(
      &::prism::_ExplGraphNode_default_instance_);
}
inline ::prism::ExplGraphNode* ExplGraphGoal::release_node() {
  // @@protoc_insertion_point(field_release:prism.ExplGraphGoal.node)
  
  ::prism::ExplGraphNode* temp = node_;
  node_ = NULL;
  return temp;
}
inline ::prism::ExplGraphNode* ExplGraphGoal::mutable_node() {
  
  if (node_ == NULL) {
    auto* p = CreateMaybeMessage<::prism::ExplGraphNode>(GetArenaNoVirtual());
    node_ = p;
  }
  // @@protoc_insertion_point(field_mutable:prism.ExplGraphGoal.node)
  return node_;
}
inline void ExplGraphGoal::set_allocated_node(::prism::ExplGraphNode* node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete node_;
  }
  if (node) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:prism.ExplGraphGoal.node)
}

// repeated .prism.ExplGraphPath paths = 2;
inline int ExplGraphGoal::paths_size() const {
  return paths_.size();
}
inline void ExplGraphGoal::clear_paths() {
  paths_.Clear();
}
inline ::prism::ExplGraphPath* ExplGraphGoal::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:prism.ExplGraphGoal.paths)
  return paths_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prism::ExplGraphPath >*
ExplGraphGoal::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:prism.ExplGraphGoal.paths)
  return &paths_;
}
inline const ::prism::ExplGraphPath& ExplGraphGoal::paths(int index) const {
  // @@protoc_insertion_point(field_get:prism.ExplGraphGoal.paths)
  return paths_.Get(index);
}
inline ::prism::ExplGraphPath* ExplGraphGoal::add_paths() {
  // @@protoc_insertion_point(field_add:prism.ExplGraphGoal.paths)
  return paths_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prism::ExplGraphPath >&
ExplGraphGoal::paths() const {
  // @@protoc_insertion_point(field_list:prism.ExplGraphGoal.paths)
  return paths_;
}

// -------------------------------------------------------------------

// ExplGraphPath

// repeated .prism.ExplGraphNode nodes = 1;
inline int ExplGraphPath::nodes_size() const {
  return nodes_.size();
}
inline void ExplGraphPath::clear_nodes() {
  nodes_.Clear();
}
inline ::prism::ExplGraphNode* ExplGraphPath::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:prism.ExplGraphPath.nodes)
  return nodes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prism::ExplGraphNode >*
ExplGraphPath::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:prism.ExplGraphPath.nodes)
  return &nodes_;
}
inline const ::prism::ExplGraphNode& ExplGraphPath::nodes(int index) const {
  // @@protoc_insertion_point(field_get:prism.ExplGraphPath.nodes)
  return nodes_.Get(index);
}
inline ::prism::ExplGraphNode* ExplGraphPath::add_nodes() {
  // @@protoc_insertion_point(field_add:prism.ExplGraphPath.nodes)
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prism::ExplGraphNode >&
ExplGraphPath::nodes() const {
  // @@protoc_insertion_point(field_list:prism.ExplGraphPath.nodes)
  return nodes_;
}

// repeated .prism.SwIns prob_switches = 2;
inline int ExplGraphPath::prob_switches_size() const {
  return prob_switches_.size();
}
inline void ExplGraphPath::clear_prob_switches() {
  prob_switches_.Clear();
}
inline ::prism::SwIns* ExplGraphPath::mutable_prob_switches(int index) {
  // @@protoc_insertion_point(field_mutable:prism.ExplGraphPath.prob_switches)
  return prob_switches_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prism::SwIns >*
ExplGraphPath::mutable_prob_switches() {
  // @@protoc_insertion_point(field_mutable_list:prism.ExplGraphPath.prob_switches)
  return &prob_switches_;
}
inline const ::prism::SwIns& ExplGraphPath::prob_switches(int index) const {
  // @@protoc_insertion_point(field_get:prism.ExplGraphPath.prob_switches)
  return prob_switches_.Get(index);
}
inline ::prism::SwIns* ExplGraphPath::add_prob_switches() {
  // @@protoc_insertion_point(field_add:prism.ExplGraphPath.prob_switches)
  return prob_switches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prism::SwIns >&
ExplGraphPath::prob_switches() const {
  // @@protoc_insertion_point(field_list:prism.ExplGraphPath.prob_switches)
  return prob_switches_;
}

// repeated .prism.SwIns tensor_switches = 3;
inline int ExplGraphPath::tensor_switches_size() const {
  return tensor_switches_.size();
}
inline void ExplGraphPath::clear_tensor_switches() {
  tensor_switches_.Clear();
}
inline ::prism::SwIns* ExplGraphPath::mutable_tensor_switches(int index) {
  // @@protoc_insertion_point(field_mutable:prism.ExplGraphPath.tensor_switches)
  return tensor_switches_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prism::SwIns >*
ExplGraphPath::mutable_tensor_switches() {
  // @@protoc_insertion_point(field_mutable_list:prism.ExplGraphPath.tensor_switches)
  return &tensor_switches_;
}
inline const ::prism::SwIns& ExplGraphPath::tensor_switches(int index) const {
  // @@protoc_insertion_point(field_get:prism.ExplGraphPath.tensor_switches)
  return tensor_switches_.Get(index);
}
inline ::prism::SwIns* ExplGraphPath::add_tensor_switches() {
  // @@protoc_insertion_point(field_add:prism.ExplGraphPath.tensor_switches)
  return tensor_switches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prism::SwIns >&
ExplGraphPath::tensor_switches() const {
  // @@protoc_insertion_point(field_list:prism.ExplGraphPath.tensor_switches)
  return tensor_switches_;
}

// repeated .prism.SwIns operators = 4;
inline int ExplGraphPath::operators_size() const {
  return operators_.size();
}
inline void ExplGraphPath::clear_operators() {
  operators_.Clear();
}
inline ::prism::SwIns* ExplGraphPath::mutable_operators(int index) {
  // @@protoc_insertion_point(field_mutable:prism.ExplGraphPath.operators)
  return operators_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prism::SwIns >*
ExplGraphPath::mutable_operators() {
  // @@protoc_insertion_point(field_mutable_list:prism.ExplGraphPath.operators)
  return &operators_;
}
inline const ::prism::SwIns& ExplGraphPath::operators(int index) const {
  // @@protoc_insertion_point(field_get:prism.ExplGraphPath.operators)
  return operators_.Get(index);
}
inline ::prism::SwIns* ExplGraphPath::add_operators() {
  // @@protoc_insertion_point(field_add:prism.ExplGraphPath.operators)
  return operators_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prism::SwIns >&
ExplGraphPath::operators() const {
  // @@protoc_insertion_point(field_list:prism.ExplGraphPath.operators)
  return operators_;
}

// -------------------------------------------------------------------

// ExplGraphNode

// int32 id = 1;
inline void ExplGraphNode::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 ExplGraphNode::id() const {
  // @@protoc_insertion_point(field_get:prism.ExplGraphNode.id)
  return id_;
}
inline void ExplGraphNode::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:prism.ExplGraphNode.id)
}

// int32 sorted_id = 2;
inline void ExplGraphNode::clear_sorted_id() {
  sorted_id_ = 0;
}
inline ::google::protobuf::int32 ExplGraphNode::sorted_id() const {
  // @@protoc_insertion_point(field_get:prism.ExplGraphNode.sorted_id)
  return sorted_id_;
}
inline void ExplGraphNode::set_sorted_id(::google::protobuf::int32 value) {
  
  sorted_id_ = value;
  // @@protoc_insertion_point(field_set:prism.ExplGraphNode.sorted_id)
}

// .prism.GoalTerm goal = 3;
inline bool ExplGraphNode::has_goal() const {
  return this != internal_default_instance() && goal_ != NULL;
}
inline void ExplGraphNode::clear_goal() {
  if (GetArenaNoVirtual() == NULL && goal_ != NULL) {
    delete goal_;
  }
  goal_ = NULL;
}
inline const ::prism::GoalTerm& ExplGraphNode::_internal_goal() const {
  return *goal_;
}
inline const ::prism::GoalTerm& ExplGraphNode::goal() const {
  const ::prism::GoalTerm* p = goal_;
  // @@protoc_insertion_point(field_get:prism.ExplGraphNode.goal)
  return p != NULL ? *p : *reinterpret_cast<const ::prism::GoalTerm*>(
      &::prism::_GoalTerm_default_instance_);
}
inline ::prism::GoalTerm* ExplGraphNode::release_goal() {
  // @@protoc_insertion_point(field_release:prism.ExplGraphNode.goal)
  
  ::prism::GoalTerm* temp = goal_;
  goal_ = NULL;
  return temp;
}
inline ::prism::GoalTerm* ExplGraphNode::mutable_goal() {
  
  if (goal_ == NULL) {
    auto* p = CreateMaybeMessage<::prism::GoalTerm>(GetArenaNoVirtual());
    goal_ = p;
  }
  // @@protoc_insertion_point(field_mutable:prism.ExplGraphNode.goal)
  return goal_;
}
inline void ExplGraphNode::set_allocated_goal(::prism::GoalTerm* goal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete goal_;
  }
  if (goal) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      goal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, goal, submessage_arena);
    }
    
  } else {
    
  }
  goal_ = goal;
  // @@protoc_insertion_point(field_set_allocated:prism.ExplGraphNode.goal)
}

// -------------------------------------------------------------------

// GoalTerm

// string name = 1;
inline void GoalTerm::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GoalTerm::name() const {
  // @@protoc_insertion_point(field_get:prism.GoalTerm.name)
  return name_.GetNoArena();
}
inline void GoalTerm::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prism.GoalTerm.name)
}
#if LANG_CXX11
inline void GoalTerm::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prism.GoalTerm.name)
}
#endif
inline void GoalTerm::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prism.GoalTerm.name)
}
inline void GoalTerm::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prism.GoalTerm.name)
}
inline ::std::string* GoalTerm::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:prism.GoalTerm.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GoalTerm::release_name() {
  // @@protoc_insertion_point(field_release:prism.GoalTerm.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GoalTerm::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:prism.GoalTerm.name)
}

// repeated string args = 2;
inline int GoalTerm::args_size() const {
  return args_.size();
}
inline void GoalTerm::clear_args() {
  args_.Clear();
}
inline const ::std::string& GoalTerm::args(int index) const {
  // @@protoc_insertion_point(field_get:prism.GoalTerm.args)
  return args_.Get(index);
}
inline ::std::string* GoalTerm::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:prism.GoalTerm.args)
  return args_.Mutable(index);
}
inline void GoalTerm::set_args(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:prism.GoalTerm.args)
  args_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GoalTerm::set_args(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:prism.GoalTerm.args)
  args_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GoalTerm::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:prism.GoalTerm.args)
}
inline void GoalTerm::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:prism.GoalTerm.args)
}
inline ::std::string* GoalTerm::add_args() {
  // @@protoc_insertion_point(field_add_mutable:prism.GoalTerm.args)
  return args_.Add();
}
inline void GoalTerm::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:prism.GoalTerm.args)
}
#if LANG_CXX11
inline void GoalTerm::add_args(::std::string&& value) {
  args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:prism.GoalTerm.args)
}
#endif
inline void GoalTerm::add_args(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:prism.GoalTerm.args)
}
inline void GoalTerm::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:prism.GoalTerm.args)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GoalTerm::args() const {
  // @@protoc_insertion_point(field_list:prism.GoalTerm.args)
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GoalTerm::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:prism.GoalTerm.args)
  return &args_;
}

// -------------------------------------------------------------------

// SwIns

// int32 id = 1;
inline void SwIns::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 SwIns::id() const {
  // @@protoc_insertion_point(field_get:prism.SwIns.id)
  return id_;
}
inline void SwIns::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:prism.SwIns.id)
}

// string name = 2;
inline void SwIns::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SwIns::name() const {
  // @@protoc_insertion_point(field_get:prism.SwIns.name)
  return name_.GetNoArena();
}
inline void SwIns::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prism.SwIns.name)
}
#if LANG_CXX11
inline void SwIns::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prism.SwIns.name)
}
#endif
inline void SwIns::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prism.SwIns.name)
}
inline void SwIns::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prism.SwIns.name)
}
inline ::std::string* SwIns::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:prism.SwIns.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SwIns::release_name() {
  // @@protoc_insertion_point(field_release:prism.SwIns.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SwIns::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:prism.SwIns.name)
}

// repeated string values = 3;
inline int SwIns::values_size() const {
  return values_.size();
}
inline void SwIns::clear_values() {
  values_.Clear();
}
inline const ::std::string& SwIns::values(int index) const {
  // @@protoc_insertion_point(field_get:prism.SwIns.values)
  return values_.Get(index);
}
inline ::std::string* SwIns::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:prism.SwIns.values)
  return values_.Mutable(index);
}
inline void SwIns::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:prism.SwIns.values)
  values_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SwIns::set_values(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:prism.SwIns.values)
  values_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SwIns::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:prism.SwIns.values)
}
inline void SwIns::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:prism.SwIns.values)
}
inline ::std::string* SwIns::add_values() {
  // @@protoc_insertion_point(field_add_mutable:prism.SwIns.values)
  return values_.Add();
}
inline void SwIns::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:prism.SwIns.values)
}
#if LANG_CXX11
inline void SwIns::add_values(::std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:prism.SwIns.values)
}
#endif
inline void SwIns::add_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:prism.SwIns.values)
}
inline void SwIns::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:prism.SwIns.values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SwIns::values() const {
  // @@protoc_insertion_point(field_list:prism.SwIns.values)
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SwIns::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:prism.SwIns.values)
  return &values_;
}

// float inside = 4;
inline void SwIns::clear_inside() {
  inside_ = 0;
}
inline float SwIns::inside() const {
  // @@protoc_insertion_point(field_get:prism.SwIns.inside)
  return inside_;
}
inline void SwIns::set_inside(float value) {
  
  inside_ = value;
  // @@protoc_insertion_point(field_set:prism.SwIns.inside)
}

// .prism.SwType sw_type = 5;
inline void SwIns::clear_sw_type() {
  sw_type_ = 0;
}
inline ::prism::SwType SwIns::sw_type() const {
  // @@protoc_insertion_point(field_get:prism.SwIns.sw_type)
  return static_cast< ::prism::SwType >(sw_type_);
}
inline void SwIns::set_sw_type(::prism::SwType value) {
  
  sw_type_ = value;
  // @@protoc_insertion_point(field_set:prism.SwIns.sw_type)
}

// -------------------------------------------------------------------

// Root

// int32 id = 1;
inline void Root::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Root::id() const {
  // @@protoc_insertion_point(field_get:prism.Root.id)
  return id_;
}
inline void Root::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:prism.Root.id)
}

// int32 sorted_id = 2;
inline void Root::clear_sorted_id() {
  sorted_id_ = 0;
}
inline ::google::protobuf::int32 Root::sorted_id() const {
  // @@protoc_insertion_point(field_get:prism.Root.sorted_id)
  return sorted_id_;
}
inline void Root::set_sorted_id(::google::protobuf::int32 value) {
  
  sorted_id_ = value;
  // @@protoc_insertion_point(field_set:prism.Root.sorted_id)
}

// -------------------------------------------------------------------

// RankRoot

// repeated .prism.Root roots = 1;
inline int RankRoot::roots_size() const {
  return roots_.size();
}
inline void RankRoot::clear_roots() {
  roots_.Clear();
}
inline ::prism::Root* RankRoot::mutable_roots(int index) {
  // @@protoc_insertion_point(field_mutable:prism.RankRoot.roots)
  return roots_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::prism::Root >*
RankRoot::mutable_roots() {
  // @@protoc_insertion_point(field_mutable_list:prism.RankRoot.roots)
  return &roots_;
}
inline const ::prism::Root& RankRoot::roots(int index) const {
  // @@protoc_insertion_point(field_get:prism.RankRoot.roots)
  return roots_.Get(index);
}
inline ::prism::Root* RankRoot::add_roots() {
  // @@protoc_insertion_point(field_add:prism.RankRoot.roots)
  return roots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::prism::Root >&
RankRoot::roots() const {
  // @@protoc_insertion_point(field_list:prism.RankRoot.roots)
  return roots_;
}

// int32 count = 2;
inline void RankRoot::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 RankRoot::count() const {
  // @@protoc_insertion_point(field_get:prism.RankRoot.count)
  return count_;
}
inline void RankRoot::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:prism.RankRoot.count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace prism

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::prism::SwType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::prism::SwType>() {
  return ::prism::SwType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_expl_2eproto
